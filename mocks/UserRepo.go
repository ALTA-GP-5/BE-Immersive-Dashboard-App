// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	userentity "immersive/domains/users/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepoMock is an autogenerated mock type for the IrepoUser type
type UserRepoMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userEntity
func (_m *UserRepoMock) Delete(userEntity userentity.UserEntity) error {
	ret := _m.Called(userEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(userentity.UserEntity) error); ok {
		r0 = rf(userEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: userEntity
func (_m *UserRepoMock) FindById(userEntity userentity.UserEntity) (userentity.UserEntity, error) {
	ret := _m.Called(userEntity)

	var r0 userentity.UserEntity
	if rf, ok := ret.Get(0).(func(userentity.UserEntity) userentity.UserEntity); ok {
		r0 = rf(userEntity)
	} else {
		r0 = ret.Get(0).(userentity.UserEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(userentity.UserEntity) error); ok {
		r1 = rf(userEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: userEntity
func (_m *UserRepoMock) Store(userEntity userentity.UserEntity) {
	_m.Called(userEntity)
}

// Update provides a mock function with given fields: userEntity
func (_m *UserRepoMock) Update(userEntity userentity.UserEntity) error {
	ret := _m.Called(userEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(userentity.UserEntity) error); ok {
		r0 = rf(userEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepoMock creates a new instance of UserRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepoMock(t mockConstructorTestingTNewUserRepoMock) *UserRepoMock {
	mock := &UserRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
