// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	classentities "immersive/domains/class/entities"

	mock "github.com/stretchr/testify/mock"
)

// ClassRepoMock is an autogenerated mock type for the IClassRepo type
type ClassRepoMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: classEntity
func (_m *ClassRepoMock) Delete(classEntity classentities.ClassEntity) error {
	ret := _m.Called(classEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(classentities.ClassEntity) error); ok {
		r0 = rf(classEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: classEntity
func (_m *ClassRepoMock) Find(classEntity classentities.ClassEntity) (classentities.ClassEntity, error) {
	ret := _m.Called(classEntity)

	var r0 classentities.ClassEntity
	if rf, ok := ret.Get(0).(func(classentities.ClassEntity) classentities.ClassEntity); ok {
		r0 = rf(classEntity)
	} else {
		r0 = ret.Get(0).(classentities.ClassEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(classentities.ClassEntity) error); ok {
		r1 = rf(classEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: classEntity
func (_m *ClassRepoMock) FindAll(classEntity classentities.ClassEntity) ([]classentities.ClassEntity, error) {
	ret := _m.Called(classEntity)

	var r0 []classentities.ClassEntity
	if rf, ok := ret.Get(0).(func(classentities.ClassEntity) []classentities.ClassEntity); ok {
		r0 = rf(classEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]classentities.ClassEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(classentities.ClassEntity) error); ok {
		r1 = rf(classEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: classEntity
func (_m *ClassRepoMock) Insert(classEntity classentities.ClassEntity) error {
	ret := _m.Called(classEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(classentities.ClassEntity) error); ok {
		r0 = rf(classEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: classEntity
func (_m *ClassRepoMock) Update(classEntity classentities.ClassEntity) error {
	ret := _m.Called(classEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(classentities.ClassEntity) error); ok {
		r0 = rf(classEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClassRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassRepoMock creates a new instance of ClassRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassRepoMock(t mockConstructorTestingTNewClassRepoMock) *ClassRepoMock {
	mock := &ClassRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
