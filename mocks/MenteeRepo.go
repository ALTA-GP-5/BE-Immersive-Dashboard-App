// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	menteeentites "immersive/domains/mentee/entities"

	mock "github.com/stretchr/testify/mock"
)

// MenteeRepoMock is an autogenerated mock type for the IMenteeRepo type
type MenteeRepoMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: menteeEntity
func (_m *MenteeRepoMock) Delete(menteeEntity menteeentites.MenteeEntity) error {
	ret := _m.Called(menteeEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(menteeentites.MenteeEntity) error); ok {
		r0 = rf(menteeEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: menteeEntity
func (_m *MenteeRepoMock) Find(menteeEntity menteeentites.MenteeEntity) (menteeentites.MenteeEntity, error) {
	ret := _m.Called(menteeEntity)

	var r0 menteeentites.MenteeEntity
	if rf, ok := ret.Get(0).(func(menteeentites.MenteeEntity) menteeentites.MenteeEntity); ok {
		r0 = rf(menteeEntity)
	} else {
		r0 = ret.Get(0).(menteeentites.MenteeEntity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(menteeentites.MenteeEntity) error); ok {
		r1 = rf(menteeEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: menteeEntity
func (_m *MenteeRepoMock) FindAll(menteeEntity menteeentites.MenteeEntity) ([]menteeentites.MenteeEntity, error) {
	ret := _m.Called(menteeEntity)

	var r0 []menteeentites.MenteeEntity
	if rf, ok := ret.Get(0).(func(menteeentites.MenteeEntity) []menteeentites.MenteeEntity); ok {
		r0 = rf(menteeEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]menteeentites.MenteeEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(menteeentites.MenteeEntity) error); ok {
		r1 = rf(menteeEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: menteeEntity
func (_m *MenteeRepoMock) Insert(menteeEntity menteeentites.MenteeEntity) error {
	ret := _m.Called(menteeEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(menteeentites.MenteeEntity) error); ok {
		r0 = rf(menteeEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: menteeEntity
func (_m *MenteeRepoMock) Update(menteeEntity menteeentites.MenteeEntity) error {
	ret := _m.Called(menteeEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(menteeentites.MenteeEntity) error); ok {
		r0 = rf(menteeEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeRepoMock creates a new instance of MenteeRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeRepoMock(t mockConstructorTestingTNewMenteeRepoMock) *MenteeRepoMock {
	mock := &MenteeRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
